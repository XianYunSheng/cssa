

所有view或者table的Id递交给前端统一为id. 这样便于前端代码复用. 

1.用户 user
User
+	GET    /user/	               获得所有user的一个json array.  并且实现filtering和sorting    
+	GET    /user/$userId	获得id为userid的user
+	PUT    /user/                     新建一个user

// 新建user也就是注册,  传递一个json obj 如下 {id:"", username:string, email:string, passwd:string} , 其后三个属性为必填项，not null。 其他的属性可以随便添加，简便起见，没有写。 可根据数据库扩充
// 新建user, put请求后。 并创建操作后， 返回一个 json obj 如下 {success: true, error:""} 或者 {success: false, error:""} 或者 {success: false, error:"user_exists"} , 后一种说明该用户名存在，无法创建。


//


+	PUT    /user/$userId        更新id为userid的user
+	DELETE /user/$userId	删除id为userid的user

+   GET    /user/$userId/pw/       获得id为userid的user的password属性
+   PUT    /user/$userId/pw/       修改id为userid的user的password属性
 
+POST     /passwdreset/              postdata: {id:userid, email:email}  

json obj：
{
id: long,
username:string,
dispname:string, //显示名
first name:string,
last name:string,
email:string,
tel:string,
add:string,
zip:string,
im: [qq:string, skype:string],  //json arry
gender:string,  //F, M or A
birthday: long, //unix 毫秒时间戳
college:string,
major:string,
position:string //学联职位
userTypeId:                   //Jack. 这个是为了user type 而新添加的
}


2. 登入/ 登出
+   POST  /login/                                                          
json obj:
{
username: string
password:string
phpsessid:string   // 用在判断用户在线和不能同时异地登录，以及后台的用户登录log？
}
返回
{
success: true/false, 
id: long//该user的id
}


+ POST  /logout/
json obj:
{
id: long  // user的id
phpsessid:string   
}

3. article管理

+	GET    /article/	               获得所有article的一个json array.  并且实现filtering和sorting 和paging   
+	GET    / article /$ article Id	获得id为articleid的article
+	PUT    / article /                             新建一个article
+	PUT    / article /$articleid            更新id为articleid            的article
+	DELETE / article /$articleid	删除id为articleid            的article

json obj:

{
        id: 1,  // article的id
		answer: [{id:3, title:"回复第一篇", creuser:2}],
		title:"第一篇",
		content:"This is the first aticle",
		creuser: "dashen", //创建者username
		credate:123123123, //创建时间戳 unix毫秒   
		moduser:"",//修改者 userid
		moddate:"" ,//修改时间戳
		refer:[{userid:2, dispname:"晓友", username:"xiaoyou"},{userid:3, dispname:"吉晨", username:"jack" }],  // 涉及人或者参与者等，json array
		state:"A", //状态，例如审核状态等
}




4. article中间编辑富文本和插入图片, 如果有这个需求， 可能需要jack 读一下这个http://dojotoolkit.org/reference-guide/1.8/dojox/editor/plugins/LocalImage.html#dojox-editor-plugins-localimage



5. task   //jack, 后四个属性你目前没有. 希望你更改数据表结构

GET /task/
GET /task/$taskId
PUT /task/
PUT /task/$taskId
DELETE /task/$taskId

{
id:
taskTitle:
content:
dueDate:
pubDate:
taskTypeId:
creUserId:
creDate:
modUserId:
modDate:
}

6.   tasktype   // master data 主数据.  这类数据分为简单主数据. simple master data.  为了复用代码, 这类数据的特点是 有一个label, 有一个code, 而系统会自动产生id, 该id是对终端用户不可见的.
				// 这类数据主要应用在可配置的选项. 比如 task type, article type, user type 职位, 性别, 等等

// 所以jack应该更改目前的tasktype表的数据结构				
				
GET /tasktype/
GET /tasktype/$tasktypeId
PUT /tasktype/
PUT /tasktype/$tasktypeId
DELETE /tasktype/$tasktypeId

{
id:
code:
label:
}

7.  articletype

GET /articletype/
GET /articletype/$tasktypeId
PUT /articletype/
PUT /articletype/$tasktypeId
DELETE /articletype/$tasktypeId

{
id:
code:
label:
}


7.  usertype

GET /usertype/
GET /usertype/$usertypeId
PUT /usertype/
PUT /usertype/$usertypeId
DELETE /usertype/$usertypeId

{
id:
code:
label:
}






